package tcpip2;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
public class Client {//클라이언트는 Sender만 필요 Receiver는 필요 없다.왜냐면  패드에서 http로 데이터를 전송받기 때문이다. 

   Socket socket;
   Sender sender;
   boolean flag = false;
   SendData sendData;
   String cid;
   
   public Client() {}
   public Client(String address,int port) throws IOException {
      cid = "jmj";
      try {
         socket = new Socket(address, port);  
      }catch(Exception e) {
         while(true) {
            System.out.println("Retry..");
            try {
               Thread.sleep(1000);
               System.out.println("주소는" + address + "port 는 " + port );
               socket = new Socket(address, port);
               break;
            } catch (Exception e1) {
            	e1.printStackTrace();
            }
         }
      }     
      System.out.println("Connected Server:"+address);
      sender = new Sender(socket);
      //Msg msg = new Msg(cid, null, null);
      //sender.setMsg(msg);
      //new Thread(sender).start();
      
      //new Receiver(socket).start();
      //sendData = new SendData();
   }
   
   class Receiver extends Thread{
      InputStream is;
      ObjectInputStream ois;
      
      public Receiver(Socket socket) throws IOException {
         is = socket.getInputStream();
         ois = new ObjectInputStream(is);
      }
      @Override
      public void run() {
         while(ois != null) {
            Msg msg = null;
            try {
               msg = (Msg) ois.readObject();
               
               if(msg.getTxt().equals("1")) {
                  sendData.setFlag(true);
                  new Thread(sendData).start();
               }else {
                  sendData.setFlag(false);
               }
               
               if(msg.getIps() == null || msg.getIps().size() == 0) {
                  System.out.println(
                        msg.getId()+":"+msg.getTxt()   
                           );
               }else {
                  ArrayList<String> list
                  = msg.getIps();
                  System.out.println(list);
               }
               
               
            }catch(Exception e) {
               System.out.println("Server Die");
               break;
            }
         }
         try {
            if(ois != null) {
               ois.close();
            }
            if(socket != null) {
               socket.close();
            }
         }catch(Exception e) {
            e.printStackTrace();
         }
      }
   }
   
   
   class Sender implements Runnable{
      OutputStream os;
      ObjectOutputStream oos;
      Msg msg;
      public Sender(Socket socket) throws IOException {
         os = socket.getOutputStream();
         oos = new ObjectOutputStream(os);
      }
      public void setMsg(Msg msg) {
         this.msg = msg;
      }
      @Override
      public void run() {
         if(oos != null) {
            try {
            	if(socket == null) {
            		System.out.println("socket null");
            	}
               oos.writeObject(msg);
            } catch (IOException e) {
               System.out.println("msg is " + msg.getId() + msg.getTxt() + msg.getTid());
               e.printStackTrace();
            }
         }
      }
      
   }
   
   
   
   
   class SendData implements Runnable{
      boolean flag = false;
      
      public void setFlag(boolean flag) {
         this.flag = flag;
      }

      @Override
      public void run() {
         while(true) {
            if(this.flag == false) {
               continue;
            }
            try {
               Thread.sleep(500);
            } catch (InterruptedException e) {
               // TODO Auto-generated catch block
               e.printStackTrace();
            }
//            System.out.println("Random...");
            Random r = new Random();
            int data = r.nextInt(100);
            Msg msg = new Msg(cid, data+"");
            sender.setMsg(msg);
            new Thread(sender).start();
         }
      }
      
   }
   
	public void startClient(Msg msg) {
		String ip;
		String txt; 
		ip = msg.getId();
		txt = msg.getTxt();
		Msg msg2 = null;
		msg2 = new Msg("haaha", null, null);
		System.out.println("msg is " + ip + " " + txt );
		sender.setMsg(msg);
		new Thread(sender).start();
		if(txt.equals("q")) {
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("End Client.");
	}

}




